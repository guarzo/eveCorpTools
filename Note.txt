type TimeSeriesData struct {
    Time  time.Time
    Kills int
}

func GetKillActivityOverTime(chartData *model.ChartData, interval string) []TimeSeriesData {
    killCounts := make(map[time.Time]int)

    for _, km := range chartData.KillMails {
        timestamp := km.EsiKillMail.KillmailTime
        var bucket time.Time

        switch interval {
        case "hourly":
            bucket = timestamp.Truncate(time.Hour)
        case "daily":
            bucket = timestamp.Truncate(24 * time.Hour)
        case "weekly":
            year, week := timestamp.ISOWeek()
            bucket = time.Date(year, 0, (week-1)*7+1, 0, 0, 0, 0, time.UTC)
        }

        killCounts[bucket]++
    }

    // Convert map to slice and sort by time
    var timeSeries []TimeSeriesData
    for t, count := range killCounts {
        timeSeries = append(timeSeries, TimeSeriesData{Time: t, Kills: count})
    }
    sort.Slice(timeSeries, func(i, j int) bool {
        return timeSeries[i].Time.Before(timeSeries[j].Time)
    })

    return timeSeries
}

// Prepare data
const labels = window.killActivityData.map(item => new Date(item.Time).toLocaleDateString());
const kills = window.killActivityData.map(item => item.Kills);

// Create the chart
const ctx = document.getElementById('killActivityChart').getContext('2d');
new Chart(ctx, {
    type: 'line',
    data: {
        labels: labels,
        datasets: [{
            label: 'Kills Over Time',
            data: kills,
            borderColor: 'rgba(255, 77, 77, 1)',
            backgroundColor: 'rgba(255, 77, 77, 0.5)',
            fill: true,
        }],
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            x: {
                type: 'time',
                time: {
                    unit: 'day',
                },
                ticks: { color: '#ffffff' },
                grid: { color: '#444' },
            },
            y: {
                beginAtZero: true,
                ticks: { color: '#ffffff' },
                grid: { color: '#444' },
            },
        },
        plugins: {
            legend: { display: false },
        },
    },
});

-------------------------
type HeatmapData struct {
    DayOfWeek int // 0 = Sunday, 6 = Saturday
    Hour      int // 0 - 23
    Kills     int
}

func GetKillHeatmapData(chartData *model.ChartData) [][]int {
    // Initialize a 7x24 matrix
    heatmap := make([][]int, 7)
    for i := range heatmap {
        heatmap[i] = make([]int, 24)
    }

    for _, km := range chartData.KillMails {
        timestamp := km.EsiKillMail.KillmailTime
        dayOfWeek := int(timestamp.Weekday())
        hour := timestamp.Hour()

        heatmap[dayOfWeek][hour]++
    }

    return heatmap
}

// Prepare data
const data = [];
for (let day = 0; day < 7; day++) {
    for (let hour = 0; hour < 24; hour++) {
        data.push({
            x: hour,
            y: day,
            v: window.killHeatmapData[day][hour],
        });
    }
}

// Create the chart
const ctx = document.getElementById('killHeatmapChart').getContext('2d');
new Chart(ctx, {
    type: 'matrix',
    data: {
        datasets: [{
            label: 'Kill Heatmap',
            data: data,
            backgroundColor: function(ctx) {
                const value = ctx.dataset.data[ctx.dataIndex].v;
                const alpha = value / maxKills; // maxKills is the highest value in the heatmap
                return `rgba(255, 77, 77, ${alpha})`;
            },
            width: ({ chart }) => (chart.chartArea || {}).width / 24 - 1,
            height: ({ chart }) => (chart.chartArea || {}).height / 7 - 1,
        }],
    },
    options: {
        tooltips: {
            callbacks: {
                title: () => '',
                label: (item) => {
                    const x = item.xLabel;
                    const y = item.yLabel;
                    const value = item.dataset.data[item.index].v;
                    return `Hour: ${x}, Day: ${y}, Kills: ${value}`;
                },
            },
        },
        scales: {
            x: {
                type: 'category',
                labels: [...Array(24).keys()],
                ticks: { color: '#ffffff' },
                grid: { display: false },
            },
            y: {
                type: 'category',
                labels: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                ticks: { color: '#ffffff' },
                grid: { display: false },
            },
        },
        plugins: {
            legend: { display: false },
        },
    },
});

-----------------------------

